// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// npx prisma init
// This command will create a prisma folder inside prisma-next project and a 
// .env file. The prisma folder will contain a schema.prisma file, this is 
// where we declare our Prisma database models. Next, we set up the Prisma 
// connections to our Postgres DB.

// npx prisma migrate dev --name init
// This command will generate the migrations file and run them against your 
// db. The --name sub-arg sets the name of the migration. The value which is init 
// will be the name of the migrations folder generated. The output is: 
// {NUMBER_GENERATED_BY_PRISMA}_init. So this will generate a folder/file inside 
// the prisma/migrations folder. A new folder with a migration.sql SQL file will 
// be generated for each migration run.

enum Role {
  CUSTOMER
  SELLER
  ADMIN
}

model Account {
  id                 String  @id @default(cuid())
  userId             String @map("user_id")
  type               String
  provider           String
  providerAccountId  String @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id                    String                 @id @default(cuid())
  role                  Role?                  // @default(null)
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime? @map("email_verified")
  image                 String?
  createdAt             DateTime               @default(now())  @map("created_at")
  updatedAt             DateTime?               @updatedAt @map("updated_at") // @default(now())
  accounts              Account[]
  sessions              Session[]
  sellerData            Seller?
  customer              Customer?
  // profileData           Customer?

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model Address {
  id                           String    @id @default(cuid())
	country                      String
	city                         String
	streetAddress                String   @map("street_address")
	postalCode                   String?  @map("postal_code")
  createdAt                    DateTime  @default(now())  @map("created_at")
  ordersAddress                Order[]
  storesAddress                Store[]

  @@unique([country, city, streetAddress])
  @@map("address")
}

model Image {
  id                          String                      @id @default(cuid())
  src                         String
  alt                         String?
  categoriesImages            ImagesOnCategory[]
  productsImages              ImagesOnProduct[]
  BrandsImages                ImagesOnBrand[]
  storesImages                Store?
  @@map("image")
}

model Category {
  // id            String                  @id @default(cuid())
  name          String                  @id
  createdAt     DateTime                @default(now()) @map("created_at")
  count         Int                     @default(1)
  products      CategoriesOnProducts[]
  images        ImagesOnCategory[]

  @@map("category")
}

model Brand {
  // id                String                       @id @default(cuid())
  name              String                       @id
  images            ImagesOnBrand[]
  count             Int                          @default(1)
  createdAt         DateTime                     @default(now())  @map("created_at")
  brandOnProducts   BrandOnProducts[]

  @@map("brand")
}

model Customer {
  id                    String                 @id @default(cuid())
  firstName             String  @map("first_name")
  secondName            String  @map("second_name")
  bio                   String?
  sex                   String
  dateOfBirth           DateTime  @map("date_of_birth")
  // shippingAddress       Address[]
  createdAt             DateTime               @default(now())  @map("created_at")
  updatedAt             DateTime?               @updatedAt @map("updated_at") // @default(now())

  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String                 @unique  @map("user_id")
  @@map("customer")
}

model Seller {
  id                       String                 @id @default(cuid())
  name                     String                 @unique
  bio                      String
  storesCounter            Int                    @default(0) @map("stores_counter")
  stores                   Store[]
  createdAt                DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime?               @updatedAt @map("updated_at") // @default(now())
  // isCompany                Boolean                // @default(true)

  user                     User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String                 @unique @map("user_id")

  @@map("seller")
}

model Store {
  id                     String                    @id @default(cuid())
  seller                 Seller                    @relation(fields: [sellerId], references: [userId], onDelete: Cascade)
  sellerId               String                   @map("seller_id")
  title                  String
  description            String
  address                Address?                  @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId              String                    @unique  @map("address_id")
  image                  Image?                    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId                String?                   @unique  @map("image_id")
  productsCounter        Int                       @default(0)  @map("products_counter")
  createdAt              DateTime                  @default(now())  @map("created_at")
  updatedAt             DateTime?               @updatedAt @map("updated_at") // @default(now())
  products               Product[]

  @@unique([sellerId, title])
  @@map("store")
}

model BrandOnProducts {
  product      Product                      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String                       @unique @map("product_id")
  brand        Brand                        @relation(fields: [brandName], references: [name], onDelete: Cascade)
  brandName    String                         @map("brand_name")
  createdAt    DateTime                     @default(now()) @map("created_at")

  @@id([productId, brandName])
  @@map("brand_on_products")
}

model ImagesOnBrand {
  image             Image           @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId           String  @map("image_id")
  brand             Brand           @relation(fields: [brandName], references: [name])
  brandName           String  @map("brand_name")
  createdAt         DateTime        @default(now()) @map("created_at")

  @@id([imageId, brandName])
  @@map("images_on_brand")
}

model Product {
  id                String                      @id @default(cuid())
  title             String
  price             Float
  // image            String
  // brand            String
  description       String
  status            String
  countInStock      Int @map("count_in_stock")
  // currentInventory Int
  // authenticity        Int?
  // returnPolicy        Int?
  // warranty       Int?
	// rating: number;
  brand             BrandOnProducts?
  createdAt         DateTime                   @default(now())  @map("created_at")
  updatedAt             DateTime?               @updatedAt @map("updated_at") // @default(now())

  store         Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId       String  @map("store_id")
  categories        CategoriesOnProducts[]
  orders            ProductsOnOrder[]
  images            ImagesOnProduct[]

  @@map("product")
}

// ProductOnStore {
//   store         Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
//   storeId       String @map("store_id")
//   product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
//   productId     String @map("product_id")
//   createdAt     DateTime    @default(now())  @map("created_at")

//   @@id([storeId, productId])
// }

model ImagesOnProduct {
  image         Image       @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId       String  @map("image_id")
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String  @map("product_id")
  createdAt     DateTime    @default(now()) @map("created_at")

  @@id([imageId, productId])
  @@map("images_on_product")
}

model ImagesOnCategory {
  image           Image       @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId         String  @map("image_id")
  category        Category    @relation(fields: [categoryName], references: [name])
  categoryName    String  @map("category_name")
  createdAt       DateTime    @default(now()) @map("created_at")

  @@id([imageId, categoryName])
  @@map("images_on_category")
}

model CategoriesOnProducts {
  product         Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String  @map("product_id")
  category        Category    @relation(fields: [categoryName], references: [name], onDelete: Cascade)
  categoryName    String  @map("category_name")
  createdAt       DateTime    @default(now()) @map("created_at")

  @@id([productId, categoryName])
  @@map("categories_on_products")
}

model Order {
  id                    String              @id @default(cuid())
	itemsPrice            Float @map("items_price")
	taxPrice              Float @map("tax_price")
	shippingPrice         Float @map("shipping_rice")
	createdAt             DateTime            @default(now()) @map("created_at")
	paidAt                DateTime? @map("paid_at")
	deliveredAt           DateTime? @map("delivered_at")
	paymentMethod         String  @map("payment_method")
  products              ProductsOnOrder[]
  shippingAddress       Address             @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId     String  @map("shipping_address_id")
  paymentResult         PaymentResult?

  @@map("order")
}

model PaymentResult {
  id                    String              @id @default(cuid())
	status                String
	updateAt              String  @map("updated_at")
	email                 String
  order                 Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId               String              @unique @map("order_id")

  @@map("payment_result")
}

model ProductsOnOrder {
	quantity         Int
	pricePerProduct  Float  @map("price_per_product")
  createdAt        DateTime      @default(now())  @map("created_at")
  product          Product       @relation(fields: [productId], references: [id])
  productId        String @map("product_id")
  order            Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId          String        @map("order_id")

  @@id([productId, orderId])
  @@map("products_on_order")
}

// DROP TABLE "account" CASCADE;
// DROP TABLE "session" CASCADE;
// DROP TABLE "user" CASCADE;
// DROP TABLE "VerificationToken" CASCADE;
// DROP TABLE "address" CASCADE;
// DROP TABLE "image" CASCADE;
// DROP TABLE "category" CASCADE;
// DROP TABLE ""brand"" CASCADE;
// DROP TABLE ""customer"" CASCADE;
// DROP TABLE ""seller"" CASCADE;
// DROP TABLE ""store"" CASCADE;
// DROP TABLE ""brand_on_products"" CASCADE;
// DROP TABLE ""images_on_brand"" CASCADE;
// DROP TABLE ""product"" CASCADE;
// DROP TABLE ""images_on_product"" CASCADE;
// DROP TABLE ""images_on_category"" CASCADE;
// DROP TABLE ""categories_on_products"" CASCADE;
// DROP TABLE ""order"" CASCADE;
// DROP TABLE ""payment_result"" CASCADE;
// DROP TABLE ""products_on_order"" CASCADE;

// DROP TABLE "Account" CASCADE;
// DROP TABLE "Session" CASCADE;
// DROP TABLE "User" CASCADE;
// DROP TABLE "VerificationToken" CASCADE;
// DROP TABLE "Address" CASCADE;
// DROP TABLE "Image" CASCADE;
// DROP TABLE "Category" CASCADE;
// DROP TABLE "Brand" CASCADE;
// DROP TABLE "Customer" CASCADE;
// DROP TABLE "Seller" CASCADE;
// DROP TABLE "Store" CASCADE;
// DROP TABLE "BrandOnProducts" CASCADE;
// DROP TABLE "ImagesOnBrand" CASCADE;
// DROP TABLE "Product" CASCADE;
// DROP TABLE "ImagesOnProduct" CASCADE;
// DROP TABLE "ImagesOnCategory" CASCADE;
// DROP TABLE "CategoriesOnProducts" CASCADE;
// DROP TABLE "Order" CASCADE;
// DROP TABLE "PaymentResult" CASCADE;
// DROP TABLE "ProductsOnOrder" CASCADE;
