import CustomNextImage from '@components/common/CustomNextImage';
import CustomerLayout from '@components/layouts/Customer';
import { useSharedMainState } from '@components/layouts/Main/context';

import { IHomeProps } from '@pages/index';

import Head from 'next/head';
import React, { CSSProperties, useEffect, useRef } from 'react';
import classes from './index.module.css';

const HomePage = ({ starredProductsInCollection1 }: IHomeProps) => {
	const [{ isMobileOrTablet }] = useSharedMainState();

	const neededProductsDataRef = useRef(
		(() => {
			const productsImages = starredProductsInCollection1.map(
				(product, productIndex, productsArr) => ({
					id: product.id,
					title: product.title,
					description: product.description,
					zIndex: productsArr.length - productIndex - 1,
					images: product.images.map(({ image }, imageIndex) => ({
						zIndex: imageIndex === 0 ? 1 : -1,
						id: image.id,
						src: image.src,
						alt: image.alt,
					})),
				})
			);

			return productsImages;
		})()
	);
	const neededProductsData = neededProductsDataRef.current;

	const neededProductsDataContainerRef = useRef<HTMLDivElement>(null);
	const productDetailsRef = useRef<HTMLDivElement>(null);

	const config = useRef({
		indexes: {
			currentProduct: 0,
			currentProductImage: 0,
		},
	});

	return (
		<CustomerLayout>
			<Head>
				<title>Shoppy</title>
				<meta name='description' content='Generated by create-t3-app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<div className='w-full p-4 md:p-8 flex justify-evenly items-center text-slate-100 bg-neutral-900 relative'>
				<div
					className='
				absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 z-[1] max-w-[90%]
				// 
				lg:relative lg:top-auto lg:left-auto lg:-translate-x-0 lg:-translate-y-0
				'
				>
					<div
						className='relative w-96 h-[36rem]'
						ref={neededProductsDataContainerRef}
					>
						{neededProductsData.map((product, productIndex, productArr) => (
							<div
								key={product.id}
								className={`absolute w-full h-full top-0 left-0 ${classes.heroProduct}`}
								// style={{ zIndex: product.zIndex }}
								style={
									{
										zIndex: product.zIndex,
										'--index': productIndex,
										'--arr-length': productArr.length,
									} as CSSProperties
								}
							>
								<div key={product.id} className='relative w-full h-full'>
									{product.images.map((image, imageIndex, imagesArr) => (
										<div
											key={image.src}
											className={`w-full h-full absolute top-0 left-0 flex items-center justify-center bg-neutral-800 ${classes.heroProductImgWrapper}`}
											// style={
											// 	{
											// 		zIndex: image.zIndex,
											// 		'--index': imageIndex,
											// 		'--arr-length': imagesArr.length,
											// 	} as CSSProperties
											// }
											style={{ zIndex: image.zIndex }}
										>
											<div className='relative w-full overflow-hidden'>
												<CustomNextImage
													src={image.src}
													alt={image.alt || ''}
													width={600}
													height={1200}
													className='object-contain w-full'
												/>
												<span
													className={`${classes.splashLine} ${
														(productIndex === 0 &&
															imageIndex === 0 &&
															classes.move) ||
														''
													}`}
													onAnimationEnd={() => {
														const containerElem =
															neededProductsDataContainerRef.current;
														const productDetailsElem =
															productDetailsRef.current;
														if (!containerElem || !productDetailsElem) return;

														const heroProducts = containerElem.querySelectorAll(
															`.${classes.heroProduct}`
														) as NodeListOf<HTMLDivElement>;

														let currentHeroProduct =
															heroProducts[
																config.current.indexes.currentProduct
															];
														let currHeroProductImgWrapper =
															currentHeroProduct.querySelectorAll(
																`.${classes.heroProductImgWrapper}`
															) as NodeListOf<HTMLDivElement>;

														if (
															!currHeroProductImgWrapper[
																config.current.indexes.currentProductImage + 1
															]
														) {
															currHeroProductImgWrapper[
																config.current.indexes.currentProductImage
															].style.zIndex = `${-1}`;
															currHeroProductImgWrapper[
																config.current.indexes.currentProductImage
															]
																.querySelector(`.${classes.splashLine}`)
																?.classList.remove(classes.move);
															currentHeroProduct.style.zIndex = `${-1}`;

															if (
																!heroProducts[
																	config.current.indexes.currentProduct + 1
																]
															) {
																config.current.indexes.currentProduct = 0;
															} else config.current.indexes.currentProduct++;

															currentHeroProduct =
																heroProducts[
																	config.current.indexes.currentProduct
																];

															currHeroProductImgWrapper =
																currentHeroProduct.querySelectorAll(
																	`.${classes.heroProductImgWrapper}`
																) as NodeListOf<HTMLDivElement>;

															(
																productDetailsElem.querySelector(
																	'.title'
																) as HTMLHeadingElement
															).innerText =
																neededProductsData[
																	config.current.indexes.currentProduct
																].title;
															(
																productDetailsElem.querySelector(
																	'.description'
																) as HTMLParagraphElement
															).innerText =
																neededProductsData[
																	config.current.indexes.currentProduct
																].description;

															currentHeroProduct.style.zIndex = `${1}`;
															config.current.indexes.currentProductImage = 0;
														} else {
															config.current.indexes.currentProductImage++;
														}

														currHeroProductImgWrapper[
															config.current.indexes.currentProductImage
														].style.zIndex = `${1}`;

														currHeroProductImgWrapper[
															config.current.indexes.currentProductImage
														]
															.querySelector(`.${classes.splashLine}`)
															?.classList.add(classes.move);
													}}
													onAnimationStart={() => {
														const containerElem =
															neededProductsDataContainerRef.current;
														if (!containerElem) return;

														const heroProducts = containerElem.querySelectorAll(
															`.${classes.heroProduct}`
														) as NodeListOf<HTMLDivElement>;

														const currentHeroProduct =
															heroProducts[
																config.current.indexes.currentProduct
															];
														const currHeroProductImgWrapper =
															currentHeroProduct.querySelectorAll(
																`.${classes.heroProductImgWrapper}`
															) as NodeListOf<HTMLDivElement>;

														const prevHeroProductImgWrapper =
															currHeroProductImgWrapper[
																config.current.indexes.currentProductImage - 1
															];
														if (prevHeroProductImgWrapper) {
															prevHeroProductImgWrapper.style.zIndex = `${-1}`;
															prevHeroProductImgWrapper
																.querySelector(`.${classes.splashLine}`)
																?.classList.remove(classes.move);
														}
													}}
												/>
											</div>
										</div>
									))}
								</div>
							</div>
						))}
					</div>
				</div>
				<div
					className={`
					w-full
					bg-75-transparent z-[2] p-8 rounded-lg max-h-[48rem] ${
						isMobileOrTablet
							? 'overflow-auto'
							: 'overflow-hidden hover:overflow-auto'
					}
					//
					md:w-5/6
					//
					lg:bg-neutral-800 lg:w-1/2
					`}
					ref={productDetailsRef}
				>
					<h1 className='title text-4xl mb-4'>
						{neededProductsData[0]?.title}
					</h1>
					<p className='description'>{neededProductsData[0]?.description}</p>
				</div>
			</div>
		</CustomerLayout>
	);
};

export default HomePage;
